from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.inline import get_main_menu
from utils.logger import logger
from typing import Dict, List
from dataclasses import dataclass
from datetime import datetime

router = Router()

@dataclass
class Habit:
    name: str
    notification_time: str = None
    created_at: datetime = None

    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏–≤—ã—á–µ–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_habits: Dict[int, List[Habit]] = {}

class HabitStates(StatesGroup):
    waiting_for_habit_name = State()
    waiting_for_notification_time = State()
    waiting_for_habit_view = State()
    waiting_for_habit_delete = State()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_habits[message.from_user.id] = []
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Habits Tracker! üéØ\n"
        "–ü—Ä–æ—Å—Ç–æ–µ –∏ —É–¥–æ–±–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø—Ä—è–º–æ –≤ Telegram!\n\n"
        "üöÄ –ö–∞–∫ –Ω–∞—á–∞—Ç—å?\n"
        "1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É ‚Äì –ø—Ä–∏–¥—É–º–∞–π—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ, –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
        "2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äì –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –ø—Ä–æ —Å–≤–æ—é —Ü–µ–ª—å.\n"
        "3Ô∏è‚É£ –û—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äì —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ä–∏–∏!\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/addhabit ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/myhabits ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "/deletehabit ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n\n"
        "üí° –°–æ–≤–µ—Ç: –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º!",
        reply_markup=get_main_menu()
    )

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/addhabit ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É\n"
        "/myhabits ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n"
        "/deletehabit ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n\n"
        "üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –∫–æ–º–∞–Ω–¥–æ–π /addhabit –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é\n"
        "2. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "3. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ —á–µ—Ä–µ–∑ /myhabits\n"
        "4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª—è–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ —á–µ—Ä–µ–∑ /deletehabit"
    )

@router.message(Command("addhabit"))
async def cmd_add_habit(message: types.Message, state: FSMContext):
    await state.set_state(HabitStates.waiting_for_habit_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏:")

@router.callback_query(lambda c: c.data == "add_habit")
async def process_add_habit(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(HabitStates.waiting_for_habit_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏:")

@router.message(HabitStates.waiting_for_habit_name)
async def process_habit_name(message: types.Message, state: FSMContext):
    habit_name = message.text
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
    new_habit = Habit(name=habit_name)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_habits:
        user_habits[user_id] = []
    user_habits[user_id].append(new_habit)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await state.set_state(HabitStates.waiting_for_notification_time)
    await message.answer(
        f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):"
    )

@router.message(HabitStates.waiting_for_notification_time)
async def process_notification_time(message: types.Message, state: FSMContext):
    time_str = message.text
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(time_str, "%H:%M")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
        if user_habits[user_id]:
            user_habits[user_id][-1].notification_time = time_str
            await message.answer(
                f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}\n"
                f"–ü—Ä–∏–≤—ã—á–∫–∞ '{user_habits[user_id][-1].name}' –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!"
            )
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):"
        )
        return
    
    await state.clear()

@router.message(Command("myhabits"))
async def cmd_my_habits(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_habits or not user_habits[user_id]:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
        return
    
    habits_list = "\n".join([
        f"{i+1}. {habit.name} (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ {habit.notification_time or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'})"
        for i, habit in enumerate(user_habits[user_id])
    ])
    await message.answer(f"–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n{habits_list}")

@router.callback_query(lambda c: c.data == "my_habits")
async def process_my_habits(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    if user_id not in user_habits or not user_habits[user_id]:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
        return
    
    habits_list = "\n".join([
        f"{i+1}. {habit.name} (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ {habit.notification_time or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'})"
        for i, habit in enumerate(user_habits[user_id])
    ])
    await callback.message.answer(f"–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n{habits_list}")

@router.message(Command("deletehabit"))
async def cmd_delete_habit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_habits or not user_habits[user_id]:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
        return
    
    habits_list = "\n".join([
        f"{i+1}. {habit.name}"
        for i, habit in enumerate(user_habits[user_id])
    ])
    await state.set_state(HabitStates.waiting_for_habit_delete)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{habits_list}"
    )

@router.message(HabitStates.waiting_for_habit_delete)
async def process_habit_delete(message: types.Message, state: FSMContext):
    try:
        habit_index = int(message.text) - 1
        user_id = message.from_user.id
        
        if 0 <= habit_index < len(user_habits[user_id]):
            deleted_habit = user_habits[user_id].pop(habit_index)
            await message.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{deleted_habit.name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–≤—ã—á–∫–∏ —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    
    await state.clear()
