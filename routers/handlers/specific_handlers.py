from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states import AddHabit
from keyboards.inline import get_main_menu
from services.storage_service import load_habits, save_habits
from services.api_client import get_quote
from utils.logger import logger

router = Router()

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É")
@router.message(F.text == "/addhabit")
async def add_habit_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏:")
    await state.set_state(AddHabit.waiting_for_habit_name)


@router.message(AddHabit.waiting_for_habit_name)
async def add_habit_name(message: types.Message, state: FSMContext):
    habit_name = message.text.strip()
    await state.update_data(habit_name=habit_name)
    await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)")
    await state.set_state(AddHabit.waiting_for_time)

@router.message(AddHabit.waiting_for_time)
async def add_habit_time(message: types.Message, state: FSMContext):
    time = message.text.strip()
    data = await state.get_data()
    habit_name = data["habit_name"]
    user_id = str(message.from_user.id)
    habits = load_habits()
    if user_id not in habits:
        habits[user_id] = []
    habits[user_id].append({
        "name": habit_name,
        "time": time,
        "progress": [],
        "streak": 0
    })
    save_habits(habits)
    await message.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ <b>{habit_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞! ‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {time}", reply_markup=get_main_menu())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –ø—Ä–∏–≤—ã—á–∫—É: {habit_name} –≤ {time}")
    await state.clear()

@router.message(F.text == "üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏")
@router.message(F.text == "/myhabits")
async def my_habits(message: types.Message):
    user_id = str(message.from_user.id)
    habits = load_habits()
    user_habits = habits.get(user_id, [])
    if not user_habits:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é!")
        return
    text = "–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n"
    for idx, habit in enumerate(user_habits, 1):
        text += f"{idx}. {habit['name']} (‚è∞ {habit['time']})\n"
    await message.answer(text)

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@router.message(F.text == "/stats")
async def stats(message: types.Message):
    user_id = str(message.from_user.id)
    habits = load_habits()
    user_habits = habits.get(user_id, [])
    if not user_habits:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.")
        return
    text = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    for habit in user_habits:
        streak = habit.get("streak", 0)
        text += f"‚Ä¢ {habit['name']}: —Å–µ—Ä–∏—è {streak} –¥–Ω–µ–π\n"
    quote = await get_quote()
    if quote:
        text += f"\nüí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è: <i>{quote['content']}</i> ‚Äî {quote['author']}"
    await message.answer(text)

@router.message(F.text == "/deletehabit")
async def delete_habit(message: types.Message):
    user_id = str(message.from_user.id)
    habits = load_habits()
    user_habits = habits.get(user_id, [])
    if not user_habits:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
    for idx, habit in enumerate(user_habits, 1):
        text += f"{idx}. {habit['name']} (‚è∞ {habit['time']})\n"
    await message.answer(text)
   
    from aiogram.fsm.context import FSMContext
    from states import DeleteHabit
    await FSMContext.set_state(DeleteHabit.waiting_for_habit_number)

from aiogram.fsm.state import State, StatesGroup

class DeleteHabit(StatesGroup):
    waiting_for_habit_number = State()

@router.message(DeleteHabit.waiting_for_habit_number)
async def process_delete_habit(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    habits = load_habits()
    user_habits = habits.get(user_id, [])
    try:
        idx = int(message.text.strip()) - 1
        if idx < 0 or idx >= len(user_habits):
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏–≤—ã—á–∫–∏.")
        return
    removed = user_habits.pop(idx)
    habits[user_id] = user_habits
    save_habits(habits)
    await message.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ <b>{removed['name']}</b> —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_main_menu())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –ø—Ä–∏–≤—ã—á–∫—É: {removed['name']}")
    await state.clear()

